// package name
var ASPlot={};

ASPlot.Utility=function(){
	
	
}

ASPlot.Utility.prototype.continuousValuePlot=function(context,disValue,regionBegPos,regionEndPos,unitWidth,height,leftWidth,name){
	var position=0;
	
	context.fillStyle  = '#000000';
	
	//console.log(height);
	
   	context.fillStyle = "#000000";
   	context.font = "10px monospace";
	
	if(leftWidth!=0)
		context.fillText(name,0,height+15);
		
	for(var j=0;j<disValue.length;++j){
		
		disValue[j]=parseFloat(disValue[j]);	
		
		if (position+j<regionBegPos) {
			//code
			continue;
		}
	
		if (position+j>regionEndPos) {
			//code
			continue;
		}
	
		context.fillRect(leftWidth+(position+j-(regionBegPos))*unitWidth,height+15*(1-disValue[j]),10,disValue[j]*15);
	}
	
		
}

ASPlot.Utility.prototype.alphabetPlot=function(context,sequence,regionBegPos,regionEndPos,unitWidth,height,leftWidth,name){
	
	/*	
	if (nucliedWidth<6) {
		//code
		context.font = leftPanelFontWidth+"px monospace";
		if (strand=="+")
			context.fillText("5'", 0, tracksHeight);
		//tracksHeight=tracksHeight+15;
		if (strand=="-")
			context.fillText("3'",0,tracksHeight);

		return;
	}
	*/
	//context.fillStyle = "black";
   	context.fillStyle = "#000000";
   	context.font = "10px monospace";
	if(leftWidth!=0)
		context.fillText(name,0,height);
	
	context.fillStyle   = '#0000ff'; // blue

	context.font = 200/114*unitWidth+"px monospace";
	//var drawSeq=seq.substring(seqPlotPos,seq.length);

	//context.font = leftPanelFontWidth+"px monospace";
	//context.fillText("5'", 0, height);
	//context.font = 2*unitWidth+"px monospace";
	
	var col=0;
	for(var i=0;i<regionEndPos-regionBegPos;++i){

		context.fillText(sequence[i],leftWidth+col, height);
		col+=unitWidth;
		
	}
	
			
}


ASPlot.Utility.prototype.coordinatePlot=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color,leftWidth,name){
	
	//code
   	context.fillStyle = "#000000";
   	context.strokeStyle = '#000000'; // black
   	context.lineWidth   = 2;

   	context.font = "10px monospace";
   	//context.beginPath();
   	//context.moveTo(0,0);
   	//context.lineTo(200,100);
   	//context.stroke();

	//context.fill();
	if(leftWidth!=0)
		context.fillText(name,0,height+15);
	var beginPos=regionBegPos;
	var endPos=regionEndPos;
	var change=(Math.round(beginPos/(100.0/unitWidth)+0.5))*(100.0/unitWidth)-beginPos;
	var coorPos=0;

	while(coorPos<Math.round(endPos-beginPos)+1){

		//context.beginPath();
		context.moveTo(leftWidth+(coorPos+change)*unitWidth,height+5);
		context.lineTo(leftWidth+(coorPos+change)*unitWidth,height+15);
		//context.closePath();
		context.fillText(Math.round(beginPos+coorPos+change+1),leftWidth+(coorPos+change)*unitWidth,height);
		coorPos=coorPos+100.0/unitWidth;
	}

	context.moveTo(leftWidth+0,height+15);
	context.lineTo(cavanseWidth,height+15);

	//tracksHeight+=30;
		
	
}
//This function is used to plot blocks.
ASPlot.Utility.prototype.blocksPlotPipeLine=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color,leftWidth,name){
	//    context.fillStyle   = '#aa66aa';
	
   	context.fillStyle = "#000000";
   	context.font = "10px monospace";
	
	if(leftWidth!=0)
		context.fillText(name,0,height+15);	
		
	if(typeof(color) == 'undefined' || color == null)
		color='#aa66aa';


	if(typeof(height) == 'undefined' || height == null)
		rowHeight=20;
	
	context.fillStyle  = color;
	var numberOfRowInThisRegion=0;
	
	for(var block in blocks){
		
		var boxBegPos=(blocks[block].begPos);
		if(boxBegPos>regionEndPos)
			continue;
			
		var begPos=boxBegPos>regionBegPos?boxBegPos:regionBegPos;		

		var endPos=(blocks[block].endPos);
		
		if(endPos<regionBegPos)
			continue;

		var len=endPos-begPos;		
		
		context.fillStyle  = color;
		context.fillRect(leftWidth+ (begPos-regionBegPos)*unitWidth,height,len*unitWidth,rowHeight );
		
		var des=blocks[block].description;
		
		context.fillStyle = "#000000";
		context.fillText(des,leftWidth+(begPos-regionBegPos)*unitWidth,height+rowHeight);
		
		height=height+rowHeight;
	numberOfRowInThisRegion++;
			
	}
	return numberOfRowInThisRegion*rowHeight;
	
}


//This function is used to plot blocks.
ASPlot.Utility.prototype.blocksPlot=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color,leftWidth,name){
	//    context.fillStyle   = '#aa66aa';
	if(typeof(color) == 'undefined' || color == null)
		color='#aa66aa';


	if(typeof(height) == 'undefined' || height == null)
		rowHeight=20;

	context.fillStyle  = color;
	
	for(var block in blocks){
		
				
		
		var boxBegPos=(blocks[block].begPos);
		if(boxBegPos>regionEndPos)
			continue;
			
		var begPos=boxBegPos>regionBegPos?boxBegPos:regionBegPos;		

		var endPos=(blocks[block].endPos);
		
		if(endPos<regionBegPos)
			continue;

		var len=endPos-begPos;		
		
		
		context.fillRect( (begPos-regionBegPos)*unitWidth,height,len*unitWidth,rowHeight );
		
			
	}
	
}

ASPlot.Utility.prototype.blocksPlotWithLine=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color){
	//    context.fillStyle   = '#aa66aa';
	if(typeof(color) == 'undefined' || color == null)
		color='#aa66aa';


	if(typeof(height) == 'undefined' || height == null)
		rowHeight=20;

	context.fillStyle  = color;
    	context.strokeStyle = '#000000'; // black
    	context.lineWidth   = 2;

	var begPos=-1,endPos=-1,len=-1;
	for(var block in blocks){
		
		var boxBegPos=(blocks[block].begPos);

			
		var begPos=boxBegPos>regionBegPos?boxBegPos:regionBegPos;
		
		var endPos=endPos<regionBegPos?regionBegPos:endPos;


		context.moveTo((endPos-regionBegPos)*unitWidth,height+rowHeight/2);
	        context.lineTo((endPos-regionBegPos+(begPos-endPos)/2)*unitWidth,height);
		
		context.moveTo((endPos-regionBegPos+(begPos-endPos)/2)*unitWidth,height);
	        context.lineTo((begPos-regionBegPos)*unitWidth,height+rowHeight/2);

		//context.fillRect((endPos-regionBegPos)*unitWidth,height+rowHeight/2,len*unitWidth,2 );
		
		//endPos=(blocks[block].endPos);
		var endPos=(blocks[block].endPos);
		
		if(boxBegPos>regionEndPos)
			continue;

		if(endPos<regionBegPos)
			continue;

		var len=endPos-begPos;

		//len=endPos-begPos;		
		
		context.fillRect( (begPos-regionBegPos)*unitWidth,height,len*unitWidth,rowHeight );
		
			
	}
	
}

ASPlot.Utility.prototype.blocksPlotWithLineAS=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color,leftWidth,name){
	//    context.fillStyle   = '#aa66aa';
   	context.fillStyle = "#000000";
   	context.font = "10px monospace";
	
	if(leftWidth!=0)
		context.fillText(name,0,height+15);	
		
	if(typeof(color) == 'undefined' || color == null)
		color='#aa66aa';


	if(typeof(height) == 'undefined' || height == null)
		rowHeight=20;


	var begPos=-1,endPos=-1,len=-1;
    	context.strokeStyle = '#000000'; // black
    	context.lineWidth   = 2;

	for(var block in blocks){
		context.fillStyle  = color;
		var ifAS=blocks[block].ifAS;

		var boxBegPos=(blocks[block].begPos);

			
		var begPos=boxBegPos>regionBegPos?boxBegPos:regionBegPos;
		
		var endPos=endPos<regionBegPos?regionBegPos:endPos;


		context.moveTo(leftWidth+(endPos-regionBegPos)*unitWidth,height+rowHeight/2);
	        context.lineTo(leftWidth+(endPos-regionBegPos+(begPos-endPos)/2)*unitWidth,height);
		
		context.moveTo(leftWidth+(endPos-regionBegPos+(begPos-endPos)/2)*unitWidth,height);
	        context.lineTo(leftWidth+(begPos-regionBegPos)*unitWidth,height+rowHeight/2);

		//context.fillRect((endPos-regionBegPos)*unitWidth,height+rowHeight/2,len*unitWidth,2 );
		
		//endPos=(blocks[block].endPos);
		var endPos=(blocks[block].endPos);
		
		if(boxBegPos>regionEndPos)
			continue;

		if(endPos<regionBegPos)
			continue;

		var len=endPos-begPos;
	
	

		if(ifAS)
			context.fillStyle  = '#22ff22';
		else
			context.fillStyle  = '#aa66aa';
		context.fillRect(leftWidth+ (begPos-regionBegPos)*unitWidth,height,len*unitWidth,rowHeight );
		
			
	}
	
}

//ASPlot.Utility.prototype.alphabetPlot=function(sequence,regionBegPos,regionEndPos,unitWidth,height){
//ASPlot.Utility.prototype.coordinatePlot=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color){
ASPlot.visualPage=function(xml){
	if(typeof(xml) == 'undefined' || xml == null||xml=="")
		return;
	
	var xmlParser=new ASPlot.xmlParser();
	this.plotEngine=new ASPlot.Utility();
	this.xml=xmlParser.parseXML(xml);
		
	this.genePlot=new ASPlot.GenePlot(xmlParser,this.plotEngine);
	
	this.isoforms=xmlParser.parseIsoforms();	
	//var isoform=this.isoforms[0];
	
	var plotLeft=true;
	this.leftFont="10px monospace";
	
	//alert(isoform.proteinSequence);
	this.proteinPlot1=new ASPlot.ProteinPlot("proteinVisual1",this.isoforms[0],this.isoforms[1],xmlParser,this.plotEngine,false);

	this.transcriptPlot=new ASPlot.transcriptPlot(xmlParser,this.plotEngine);
	
	//this.proteinPlot2=new ASPlot.ProteinPlot("proteinVisual2",this.isoforms[1],xmlParser,this.plotEngine,true);
					
}

ASPlot.visualPage.prototype.setIfPlotLeft=function(plotLeft){
	
	this.genePlot.plotLeft=plotLeft;
	this.proteinPlot1.plotLeft=plotLeft;
	//this.proteinPlot2.plotLeft=plotLeft;
	
	
}


ASPlot.ProteinPlot=function(canvasElement,isoform1,isoform2,xmlParser,plotEgnine,asOut){
	if(typeof(canvasElement) == 'undefined' || canvasElement == null||canvasElement=="")
		return;	
	
	this.plotLeft=true;
	this.leftWidth=120;
	
	this.isoform1=isoform1;
	this.isoform2=isoform2;
	
	this.proteinLength=isoform1.proteinSequence.length;
	this.start=0;
	this.end=this.proteinLength;
	
	this.plotEngine=plotEgnine;
	this.canvasProtein=document.getElementById(canvasElement);
	this.contextProtein=this.canvasProtein.getContext("2d");
	this.canvasProteinWidth=this.canvasProtein.width;
	
	this.currentPosition=0;
	//this.unitwidth=-1;//nuclied width
	//this.unitwidth=10;//nuclied width
	this.x=-1;//current mouse x position
	this.y=-1;//current mouse y position
	this.mouseIsDown=false;
	this.moveWidth=10;
	this.coordinatePosition=-1;
	
	this.ifASOut=asOut;	
	
	this.unitWidth=11;
	this.maxUnitWidth=15;
	this.minUnitWidth=1;
	this.minFontWidth=7;
	
	this.imgData;
	this.moveLastX=-1;
	this.moveLastY=-1;
	
	this.geneStrucBlocks=xmlParser.parseASExons();
	
	this.currentPosition=this.start;
	this.residue=0;

	var a=this;
	this.alternativeSplicingRegions=[];

	this.canvasProtein.addEventListener("mouseup", function(e){a.mouseUp(e)}, false);
	this.canvasProtein.addEventListener("mousedown", function(e){a.mouseDown(e)}, false);	
	this.canvasProtein.addEventListener("mousemove", function(e){a.mouseMove(e)}, false);	
	this.canvasProtein.addEventListener("keydown", function(e){a.KeyDown(e)}, false);	
	this.canvasProtein.addEventListener("mouseout", function(e){a.mouseOut(e)}, false);	
	this.canvasProtein.addEventListener("mousewheel", function(e){a.mouseWheel(e)}, false);
	//modify isoform2
	
	var currentPosition=0;
	var asProteinBegPos=-1;
	var asProteinEndPos=-1;
	
	for(var block=this.geneStrucBlocks.length-1;block>=0;block--){
		
		var boxBegPos=this.geneStrucBlocks[block].begPos/3;
		var boxEndPos=this.geneStrucBlocks[block].endPos/3;
		var ifAS=this.geneStrucBlocks[block].ifAS;
		var boxLength=boxEndPos-boxBegPos+1;
		
		if(ifAS){
			if(asProteinBegPos!=-1&&asProteinEndPos!=currentPosition){
				asProteinEndPos=currentPosition+boxLength;
				
							
			}else{
				if(asProteinBegPos!=-1){
					
	this.alternativeSplicingRegions.push({begPos:asProteinBegPos,endPos:asProteinEndPos});					
					
				}
				asProteinBegPos=currentPosition;
				asProteinEndPos=currentPosition+boxLength;
				
				
							
			}
			
			
		}

		currentPosition+=boxLength;
		
	}
	
	if(asProteinBegPos!=-1){
					
		this.alternativeSplicingRegions.push({begPos:asProteinBegPos,endPos:asProteinEndPos});					
					
	}
	
	
	for(var asRegionIndex=0;asRegionIndex<this.alternativeSplicingRegions.length;++asRegionIndex){
		var begPos=this.alternativeSplicingRegions[asRegionIndex].begPos;
		var endPos=this.alternativeSplicingRegions[asRegionIndex].endPos;		
		
		var length=endPos-begPos+1;
		
		//pfam
		var numberOfPfams=this.isoform2.pfams.length;
		for(var i=0;i<numberOfPfams;++i){
			var pfam=this.isoform2.pfams[i];
			
			var pfamBegPos=pfam.begPos;
			var pfamEndPos=pfam.endPos;
			if(pfamBegPos<begPos&&pfamEndPos>begPos){
				this.isoform2.pfams[i].endPos=begPos;
				
				pfamBegPos=endPos;
				pfamEndPos+=length;
				console.log(pfam);
				console.log(pfam.pfamDescription+"\t"+pfam.pfamFamily);
				
this.isoform2.pfams.push({'begPos':pfamBegPos,'endPos':pfamEndPos,'description':(pfam.description),'pfamFamily':(pfam.pfamFamily)});				

				
			}else{			
				
				if(pfamBegPos>begPos){
			this.isoform2.pfams[i].begPos=pfamBegPos+length;
											
				}	
				if(pfamEndPos>begPos){
					this.isoform2.pfams[i].endPos=pfamEndPos+length;
				}		
	
			}	

		}	
				
				
		//disprot
		for(var i=0;i<length-2;++i){
			this.isoform2.disorderValue.splice(begPos,0,0.0);
			
			
				
		}
		//sequence
		this.start,isoform2.proteinSequence.substring(0,begPos);
		var prepareInsertStr="";		
		for(var i=0;i<length-2;++i){
			prepareInsertStr+=" ";
			
		}
		
		this.isoform2.proteinSequence=this.isoform2.proteinSequence.substring(0,begPos)+prepareInsertStr+this.isoform2.proteinSequence.substring(begPos,this.isoform2.proteinSequence.length);
			
		
	}
	
		
}


ASPlot.ProteinPlot.prototype.mouseDown=function(e){
	//alert('meng1');
	this.mouseIsDown=true;
	this.x=e.clientX;
	this.y=e.clientY;
	
}

ASPlot.ProteinPlot.prototype.mouseWheel=function(e){
	var delta=e.wheelDelta;
	
	var shiftDown = e.shiftKey;
	if(!shiftDown)
		return;

        if (delta<0){
		this.unitWidth--;//zoom in
		if(this.unitWidth<this.minUnitWidth){
			this.unitWidth=this.minUnitWidth;
		}	
	
        } else{
		//code
		this.unitWidth++;//zoom out
		if(this.unitWidth>this.maxUnitWidth){
			this.unitWidth=this.maxUnitWidth;	
		}

        }
	var plotEndPos=this.end-(this.canvasProteinWidth-this.leftWidth)/this.unitWidth+1;
	if(plotEndPos<0)
		plotEndPos=0;
		
	//alert(this.currentPosition);
	if (this.currentPosition<this.start) {
		//code
		this.currentPosition=this.start;
	}
	//alert(this.currentPosition);
	if (this.currentPosition>plotEndPos) {

		this.currentPosition=plotEndPos;
	}
	
	this.plot();

}

ASPlot.ProteinPlot.prototype.mouseOut=function(e){
	this.mouseIsDown=false;
}

ASPlot.ProteinPlot.prototype.mouseUp=function(e){
	//alert('meng2');
	this.mouseIsDown=false;
}

ASPlot.ProteinPlot.prototype.mouseMove=function(e){
	var curX=e.offsetX;
	var curY=e.offsetY;

	if (this.mouseIsDown&&(Math.abs(curX-this.x)>this.moveWidth)) {
		//code
		//alert(Math.abs(curX-this.x));
		//alert(this.currentPosition);


		var offset=curX-this.x+this.residue;
		
		this.residue=offset%this.unitWidth;

		this.currentPosition=this.currentPosition+parseInt(-1*offset/this.unitWidth);

		var plotEndPos=this.end-(this.canvasProteinWidth)/this.unitWidth+5;
		if(plotEndPos<0)
			plotEndPos=0;
		
		//alert(this.currentPosition);
		if (this.currentPosition<this.start) {
			//code
			this.currentPosition=this.start;
		}
		//alert(this.currentPosition);
		if (this.currentPosition>plotEndPos) {


			this.currentPosition=plotEndPos;
		}
		//alert(this.currentPosition);
		this.plot();

		this.x=curX;
		this.y=curY;
	}else{
		if(Math.abs(curX-this.moveLastX)>this.moveWidth/2||Math.abs(curY-this.moveLastY)>this.moveWidth/2){
			this.contextProtein.beginPath();
			this.contextProtein.strokeStyle = '#000000'; // black
		   	this.contextProtein.lineWidth= 2;
			

			//this.tmpContext=this.contextGene.save();
			this.contextProtein.putImageData(this.imgData,0,0);
			this.imgData=this.contextProtein.getImageData(0,0,this.canvasProtein.width, this.canvasProtein.height);

			this.contextProtein.moveTo(0,curY);
			this.contextProtein.lineTo(this.canvasProteinWidth,curY);
			
			this.contextProtein.moveTo(curX,0);
			this.contextProtein.lineTo(curX,this.canvasProtein.height);
			
			this.contextProtein.stroke();
			this.moveLastX=curX;
			this.moveLastY=curY;
			
			//this.tmpContext=this.contextGene.restore();
			
		}


	}

	
}

ASPlot.ProteinPlot.prototype.keyDown=function(e){
	
	
}

ASPlot.ProteinPlot.prototype.plot=function(){
	this.contextProtein.beginPath();
	this.contextProtein.clearRect(0, 0, this.canvasProtein.width, this.canvasProtein.height);

	
	var hight=30;
	hight+=this.disPlot(hight,this.isoform2);
	hight+=this.pfamPlot(hight,this.isoform2);
	hight+=this.plotAlphabet(hight,this.isoform2);

	hight+=this.plotProteinBlocks(hight);

	this.coordinatePosition=hight;
	hight+=this.plotCoordinate(hight);

	
	hight+=this.plotProteinBlocks(hight);

	hight+=this.plotAlphabet(hight,this.isoform1);
	hight+=this.pfamPlot(hight,this.isoform1);
	hight+=this.disPlot(hight,this.isoform1);
	
	
	this.plotDecoration();	
	this.contextProtein.stroke();
	
	this.imgData=this.contextProtein.getImageData(0,0,this.canvasProtein.width, this.canvasProtein.height);
}

ASPlot.ProteinPlot.prototype.plotDecoration=function(){
	
   	this.contextProtein.fillStyle = "#000000";
	
	this.contextProtein.moveTo(this.leftWidth-20,10);
	this.contextProtein.lineTo(this.leftWidth,10);
	
	this.contextProtein.moveTo(this.leftWidth-10,10);
	this.contextProtein.lineTo(this.leftWidth-10,this.coordinatePosition-5);
		
	this.contextProtein.moveTo(this.leftWidth-20,this.coordinatePosition-5);
	this.contextProtein.lineTo(this.leftWidth,this.coordinatePosition-5);
	
	
	this.contextProtein.save();
	this.contextProtein.translate(0, 0);
	this.contextProtein.rotate(-Math.PI/2);
	//this.contextProtein.textAlign = "center";
	this.contextProtein.fillText("AS isoform",10-this.coordinatePosition, this.leftWidth-20);

	//this.contextProtein.translate(0, 0);
	//this.contextProtein.rotate(-Math.PI/2);
	//this.contextProtein.textAlign = "center";
	this.contextProtein.fillText("Canonical isoform",100-this.canvasProtein.height, this.leftWidth-20);
	
	this.contextProtein.restore();
	
	
	//second
	this.contextProtein.moveTo(this.leftWidth-20,this.coordinatePosition+20);
	this.contextProtein.lineTo(this.leftWidth,this.coordinatePosition+20);

	this.contextProtein.moveTo(this.leftWidth-10,this.coordinatePosition+20);
	this.contextProtein.lineTo(this.leftWidth-10,this.canvasProtein.height-10);
	
	this.contextProtein.moveTo(this.leftWidth-20,this.canvasProtein.height-10);
	this.contextProtein.lineTo(this.leftWidth,this.canvasProtein.height-10);
}

ASPlot.ProteinPlot.prototype.plotAlphabet=function(hight,isoform){
	//alert(this.start);
	//alert(this.currentPosition);
	if(this.unitWidth<this.minFontWidth)
		return 40;
	
	var drawSeq=isoform.proteinSequence.substring(this.currentPosition-this.start,isoform.proteinSequence.length);
	var coordinateEndPosition=this.currentPosition+this.canvasProteinWidth/this.unitWidth;	

	this.plotEngine.alphabetPlot(this.contextProtein,drawSeq,this.currentPosition,coordinateEndPosition,this.unitWidth,hight+25,this.leftWidth,"Amino acid");
	
	return 35;
}

ASPlot.ProteinPlot.prototype.plotCoordinate=function(hight){
	
//ASPlot.Utility.prototype.coordinatePlot=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color){
	//var unitWidth=this.canvasGeneWidth/(this.start-this.end+1);
	var coordinateEndPosition=this.currentPosition+this.canvasProteinWidth/this.unitWidth;	

	this.plotEngine.coordinatePlot(this.contextProtein,this.data,this.currentPosition,coordinateEndPosition,this.canvasProteinWidth,50,this.unitWidth,hight,'#aa66aa',this.leftWidth,"coordinate");
	return 35;
}

ASPlot.ProteinPlot.prototype.plotProteinBlocks=function(hight){
	
	var coordinateEndPosition=this.currentPosition+this.canvasProteinWidth/this.unitWidth;	
	//this.plotEngine.blocksPlotWithLineAS(this.context1,this.data,regionBegPos,regionEndPos,canvasWidth,50,unitWidth,30,'#aa66aa');
//this.plotEngine.blocksPlotWithLineAS//(this.contextProtein,this.geneStrucBlocks,this.currentPosition,coordinateEndPosition,this.canvasGeneWidth,50,this.unitWidth,hight,'#aa66aa');
   	this.contextProtein.fillStyle = "#000000";
   	this.contextProtein.font = "10px monospace";	
	
	if(this.leftWidth!=0)	
		this.contextProtein.fillText("exons",0,hight+15);
	
	if(typeof(color) == 'undefined' || color == null)
		color='#aa66aa';


	if(typeof(height) == 'undefined' || height == null)
		rowHeight=20;

	this.contextProtein.fillStyle  = color;
	var col=0;
	color='#aa66aa';
	//color='000000';
	this.contextProtein.fillStyle  = color;
	for(var block=this.geneStrucBlocks.length-1;block>=0;block--){
		
		var boxBegPos=this.geneStrucBlocks[block].begPos/3;
		var boxEndPos=this.geneStrucBlocks[block].endPos/3;
		var ifAS=this.geneStrucBlocks[block].ifAS;
		if(this.ifASOut&&ifAS)
			continue;
		
		var boxLength=boxEndPos-boxBegPos+1;
		
		var begPos=col;
		var endPos=col+boxLength;
		col+=boxLength;
				
		if(endPos<this.currentPosition)		
			continue;
		if(begPos>coordinateEndPosition)
			continue;			
			
		begPos=begPos>this.currentPosition?begPos:this.currentPosition;
		endPos=(endPos-1.3)<coordinateEndPosition?(endPos-1.3):coordinateEndPosition;
		
		if(ifAS)
			this.contextProtein.fillStyle  = '#22ff22';
		else
			this.contextProtein.fillStyle  = '#aa66aa';	
			
		this.contextProtein.fillRect(this.leftWidth+(begPos-this.currentPosition)*(this.unitWidth),hight,(endPos-begPos+1)*(this.unitWidth),20);
		
	}
	
		return 35;
}

//ASPlot.Utility.prototype.blocksPlot=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color){
ASPlot.ProteinPlot.prototype.pfamPlot=function(hight,isoform){
	var coordinateEndPosition=this.currentPosition+this.canvasProteinWidth/this.unitWidth;	
	
	var pfams=isoform.pfams;

var pfamHeight=this.plotEngine.blocksPlotPipeLine(this.contextProtein,pfams,this.currentPosition,coordinateEndPosition,this.canvasProteinWidth,20,this.unitWidth,hight,'#22ff22',this.leftWidth,"pfam");

	
	
	return pfamHeight;
}

//ASPlot.Utility.prototype.continuousValuePlot=function(context,disValue,regionBegPos,regionEndPos,unitWidth,height){
ASPlot.ProteinPlot.prototype.disPlot=function(height,isoform){
	
	var coordinateEndPosition=this.currentPosition+this.canvasProteinWidth/this.unitWidth;	

	var disvalue=isoform.disorderValue;
	
	this.plotEngine.continuousValuePlot(this.contextProtein,disvalue,this.currentPosition,coordinateEndPosition,this.unitWidth,height,this.leftWidth,"disprot");
	return 35;
}


ASPlot.GenePlot=function(xmlParser,plotEngine){
	//get canvas context
	this.plotLeft=true;
	
	this.leftWidth=120;
	
	this.plotEngine=plotEngine;
	this.canvasGene = document.getElementById("geneVisual");
    	this.contextGene = this.canvasGene.getContext("2d");
	this.canvasGeneWidth  = this.canvasGene.width;
	// graphic parameters	
	this.currentPosition=-1//plot current position
	this.unitwidth=-1;//nuclied width
	this.x=-1;//current mouse x position
	this.y=-1;//current mouse y position
	this.mouseIsDown=false;
	this.moveWidth=15;

	//this.tmpContext=this.contextGene;
	this.imgData;
	this.moveLastX=-1;
	this.moveLastY=-1;

	this.unitWidth=11;
	this.maxUnitWidth=15;
	this.minUnitWidth=1;
	this.minFontWidth=7;
	this.residue=0;
	//this.exons=xmlParser.parseASExons();
	
	var geneSequenceStruc=xmlParser.parseGeneSequence();
	this.geneSequence=geneSequenceStruc['sequence'];
	this.start=parseInt(geneSequenceStruc['start']);
	this.end=parseInt(geneSequenceStruc['end']);
	
	this.geneStrucBlocks=xmlParser.parseASExons();
		
	this.currentPosition=this.start;
	//this.endCoordinatePosition=this.

	var a=this;
	this.canvasGene.addEventListener("mouseup", function(e){a.mouseUp(e)}, false);
	this.canvasGene.addEventListener("mousedown", function(e){a.mouseDown(e)}, false);	
	this.canvasGene.addEventListener("mousemove", function(e){a.mouseMove(e)}, false);	
	this.canvasGene.addEventListener("keydown", function(e){a.KeyDown(e)}, false);	
	this.canvasGene.addEventListener("mouseout", function(e){a.mouseOut(e)}, false);	
	this.canvasGene.addEventListener("mousewheel", function(e){a.mouseWheel(e)}, false);
	
}

ASPlot.GenePlot.prototype.mouseDown=function(e){
	//alert('meng1');
	this.mouseIsDown=true;
	this.x=e.clientX;
	this.y=e.clientY;
	//this.moveLeft();
	//this.moveRight();
}

ASPlot.GenePlot.prototype.mouseWheel=function(e){
	var delta=event.wheelDelta;
	var shiftDown = e.shiftKey;
	if(!shiftDown)
		return;

        if (delta<0){
		this.unitWidth--;//zoom in
		if(this.unitWidth<=1)		
			this.unitWidth=this.unitWidth/1.2;
		
		if(this.unitWidth<this.minUnitWidth){
			this.unitWidth=this.minUnitWidth;
		}	
	
        } else{
		//code
		this.unitWidth++;//zoom out
		if(this.unitWidth>this.maxUnitWidth){
			this.unitWidth=this.maxUnitWidth;	
		}

        }
	var plotEndPos=this.end-(this.canvasGeneWidth)/this.unitWidth;
	if(plotEndPos<0)
		plotEndPos=0;

	//alert(this.currentPosition);
	if (this.currentPosition<this.start) {
		//code
		this.currentPosition=this.start;
	}
	//alert(this.currentPosition);
	if (this.currentPosition>plotEndPos) {

		this.currentPosition=plotEndPos;
	}
	this.plot();
	//e.stopPropagation();
}

ASPlot.GenePlot.prototype.mouseOut=function(e){
	this.mouseIsDown=false;
}

ASPlot.GenePlot.prototype.mouseUp=function(e){
	//alert('meng2');
	this.mouseIsDown=false;
}

ASPlot.GenePlot.prototype.mouseMove=function(e){
	var curX=e.offsetX;
	var curY=e.offsetY;
	
	if (this.mouseIsDown&&(Math.abs(curX-this.x)>this.moveWidth)) {
		//code
		//alert(Math.abs(curX-this.x));
		//alert(this.currentPosition);
		var offset=curX-this.x+this.residue;
		
		this.residue=offset%this.unitWidth;
		
		this.currentPosition=this.currentPosition+parseInt(-1*offset/this.unitWidth);

		var plotEndPos=this.end-(this.canvasGeneWidth)/this.unitWidth;
		if(plotEndPos<0)
			plotEndPos=0;

		//alert(this.currentPosition);
		if (this.currentPosition<this.start) {
			//code
			this.currentPosition=this.start;
		}
		//alert(this.currentPosition);
		if (this.currentPosition>plotEndPos) {


			this.currentPosition=plotEndPos;
		}
		//alert(this.currentPosition);
		this.plot();

		
		this.x=curX;
		this.y=curY;
	}else{
		if(Math.abs(curX-this.moveLastX)>this.moveWidth/2){
			this.contextGene.beginPath();
			this.contextGene.strokeStyle = '#000000'; // black
		   	this.contextGene.lineWidth= 1;
			

			//this.tmpContext=this.contextGene.save();
			this.contextGene.putImageData(this.imgData,0,0);
			this.imgData=this.contextGene.getImageData(0,0,this.canvasGene.width, this.canvasGene.height);

			this.contextGene.moveTo(0,curY);
			this.contextGene.lineTo(this.canvasGeneWidth,curY);
			
			this.contextGene.moveTo(curX,0);
			this.contextGene.lineTo(curX,this.canvasGene.height);
			
			this.contextGene.stroke();
			this.moveLastX=curX;
			//this.tmpContext=this.contextGene.restore();
			
		}
			
		
		
			
	}

	
}

ASPlot.GenePlot.prototype.moveLeft=function(){
	this.currentPosition-=1;
	this.plot();

}

ASPlot.GenePlot.prototype.moveRight=function(){
	this.currentPosition+=1;
	this.plot();

}


ASPlot.GenePlot.prototype.keyDown=function(e){
	//javascript: console.log(2);
	if(e.keyCode == 37){
		this.currentPosition+=1;
		
	}
	
	if(e.keyCode == 39){
		this.currentPosition+=-1;
		
	}
	
	var plotEndPos=this.end-(this.canvasGeneWidth)/this.unitWidth;
	if(plotEndPos<0)
		plotEndPos=0;

	//alert(this.currentPosition);
	if (this.currentPosition<this.start) {
		//code
		this.currentPosition=this.start;
	}
	//alert(this.currentPosition);
	if (this.currentPosition>plotEndPos) {

		this.currentPosition=plotEndPos;
	}
	
	this.plot();
}

ASPlot.GenePlot.prototype.plot=function(){
	this.contextGene .beginPath();
	this.contextGene .clearRect(0, 0, this.canvasGene.width, this.canvasGene.height);

	var hight=20;

	hight+=this.plotCoordinate(hight);
	hight+=this.plotAlphabet(hight);
	hight+=this.plotGeneBlocks(hight);
	
	this.contextGene.stroke();
	
	this.imgData=this.contextGene.getImageData(0,0,this.canvasGene.width, this.canvasGene.height);
}

ASPlot.GenePlot.prototype.plotAlphabet=function(hight){
	//alert(this.start);
	//alert(this.currentPosition);
	if(this.unitWidth<this.minFontWidth)
		return 40;
	//console.log(this.currentPosition);
	var drawSeq=this.geneSequence.substring(this.currentPosition-this.start,this.geneSequence.length);

	var coordinateEndPosition=this.currentPosition+parseInt(this.canvasGeneWidth/this.unitWidth);	

	this.plotEngine.alphabetPlot(this.contextGene,drawSeq,this.currentPosition,coordinateEndPosition,this.unitWidth,hight,this.leftWidth,"nuclied acid");
	
	return 40;
}

ASPlot.GenePlot.prototype.plotCoordinate=function(hight){
	
//ASPlot.Utility.prototype.coordinatePlot=function(context,blocks,regionBegPos,regionEndPos,cavanseWidth,rowHeight,unitWidth,height,color){
	//var unitWidth=this.canvasGeneWidth/(this.start-this.end+1);
	var coordinateEndPosition=this.currentPosition+parseInt(this.canvasGeneWidth/this.unitWidth);	

	this.plotEngine.coordinatePlot(this.contextGene,this.data,this.currentPosition,coordinateEndPosition,this.canvasGeneWidth,50,this.unitWidth,hight,'#aa66aa',this.leftWidth,"coordinate");
	return 40;
}

ASPlot.GenePlot.prototype.plotGeneBlocks=function(hight){
	
	var coordinateEndPosition=this.currentPosition+this.canvasGeneWidth/this.unitWidth;	
	//this.plotEngine.blocksPlotWithLineAS(this.context1,this.data,regionBegPos,regionEndPos,canvasWidth,50,unitWidth,30,'#aa66aa');
	this.plotEngine.blocksPlotWithLineAS(this.contextGene,this.geneStrucBlocks,this.currentPosition,coordinateEndPosition,this.canvasGeneWidth,20,this.unitWidth,hight,'#aa66aa',this.leftWidth,"geneExons");
	
}

ASPlot.transcriptPlot=function(xmlParser,plotEngine){
	//if(typeof(xml) == 'undefined' || xml == null||xml=="")
	//	return;	
	
	//initialization
	//var xmlParser=new ASPlot.xmlParser();
	//this.plotEngine=new ASPlot.Utility();
	
	this.leftWidth=0;
	this.xmlParser=xmlParser;
	this.plotEngine=plotEngine;
	
	//canvas1
    	//this.canvas1 = document.getElementById("visualas");
    	//this.context1 = this.canvas1.getContext("2d");
	//this.xml=xmlParser.parseXML(xml);
	//this.data=this.xml.parseASExons();
	//this.canvas1.height=100;

	//canvas2
	this.canvas2=document.getElementById("transcriptsVisual");
	this.context2=this.canvas2.getContext("2d");
	//this.canvas2.width  = document.documentElement.clientWidth;	
	this.transcripts=this.xmlParser.parseTranscripts();
	this.canvas2.height=this.transcripts.length*25+40;
	
	
}

//ASPlot.Utility.prototype.blocksPlot=function(context,blocks,regionBegPos,regionEndPos,cavansWidth,rowHeight,unitWidth,height,color){
ASPlot.transcriptPlot.prototype.plotAS=function(){
    	this.context1.beginPath();
	
	var regionBegPos=parseInt(this.data[0].begPos);
	var regionEndPos=parseInt(this.data[this.data.length-1].endPos);
	var canvasWidth=this.canvas1.width;
	var unitWidth=canvasWidth/(regionEndPos-regionBegPos+1);
	this.plotEngine.coordinatePlot(this.context1,this.data,regionBegPos,regionEndPos,canvasWidth,50,unitWidth,10,'#aa66aa',this.leftWidth);
	
	this.plotEngine.blocksPlotWithLineAS(this.context1,this.data,regionBegPos,regionEndPos,canvasWidth,50,unitWidth,30,'#aa66aa');
	
	this.context1.stroke();
		
}

ASPlot.transcriptPlot.prototype.plot=function(){
    	this.context2.beginPath();
	
	
	var regionBegPos=1000000000;
	var regionEndPos=-1;

	for(var tranIndex in this.transcripts){
		var oneTranscript=this.transcripts[tranIndex];
		for(var exonIndex in oneTranscript){
			var begPos=parseInt(oneTranscript[exonIndex].begPos);
			var endPos=parseInt(oneTranscript[exonIndex].endPos);
			if(regionBegPos>begPos){
				regionBegPos=begPos;
			}
			if(regionEndPos<endPos){
				regionEndPos=endPos;
			}			
			
		}
			
	}
	
		
	var canvasWidth=this.canvas2.width;
	var unitWidth=canvasWidth/(regionEndPos-regionBegPos+1);
	var height=10;

	this.plotEngine.coordinatePlot(this.context2,this.transcripts,regionBegPos,regionEndPos,canvasWidth,50,unitWidth,10,'#aa66aa',this.leftWidth);
	height+=30;
	
	for(var transcriptIndex=0; transcriptIndex<this.transcripts.length;transcriptIndex++){		
	
this.plotEngine.blocksPlotWithLineAS(this.context2,this.transcripts[transcriptIndex],regionBegPos,regionEndPos,canvasWidth,20,unitWidth,height,'#aa66aa',this.leftWidth,"transcript"+transcriptIndex);

	height+=25;	
	}

	this.context2.stroke();
		
}



ASPlot.xmlParser=function(){
	
	
	
}



//cassettExonEventPosTable.push({from:0,to:1});
ASPlot.xmlParser.prototype.parseASExons=function(){
	this.blocks=[];
	var transcriptNode=this.eventNodes[0].getElementsByTagName("alternativeExons");
	var exonsNode=transcriptNode[0].childNodes;
			
	//var exons=position.split("@");
	for(var exonIndex=0; exonIndex<exonsNode.length;++exonIndex){
			
		//var loneExon=exonsNode[exonIndex].getAttribute();	
			//var lchrsosome=exonsNode[exonIndex].getAttribute("");
		var lbegPos=parseInt(exonsNode[exonIndex].getAttribute("start"));
		var lendPos=parseInt(exonsNode[exonIndex].getAttribute("end"));
			//var lstrand=loneExon[3];
		var ifAlternativeStr=exonsNode[exonIndex].getAttribute("IfAlternative");
		var ifAlternative=Boolean(ifAlternativeStr=="true");

			//if(loneExon.length>4){
				//var lIfAS=oneExon[4];
		this.blocks.push({begPos:lbegPos,endPos:lendPos,ifAS:ifAlternative});
			
			//}
			//else{
			
				//blocks.push({begPos:lbegPos,endPos:lendPos,ifAS:ifAlternative});
				
			//}	

		}
	
	return this.blocks;
}

ASPlot.IsoformStruct=function(){
	this.proteinSequence="";
	this.pfams;
	this.disorderString="";
	
}
ASPlot.IsoformStruct.prototype.setProteinSequence=function(seq){
	this.proteinSequence=seq;
}

ASPlot.xmlParser.prototype.parseIsoforms=function(){
	var isoformNodes=this.eventNodes[0].getElementsByTagName("isoform");
	var isoforms=new Array();
	
	for(var isoformIndex=0; isoformIndex<isoformNodes.length;isoformIndex++){
		var  featuresNode=isoformNodes[isoformIndex].children;	
		var oneIsoform=new ASPlot.IsoformStruct();			

		var proteinSequence=isoformNodes[isoformIndex].getElementsByTagName("proteinSequence")[0].innerHTML;

		oneIsoform.proteinSequence=proteinSequence;

		var pfamNodes=isoformNodes[isoformIndex].getElementsByTagName("pfam_domain");

		var onePfam=[];
		for(var pfamIndex=0;pfamIndex<pfamNodes.length;pfamIndex++){

			var pfamBegPos=parseInt((pfamNodes[pfamIndex]).getAttribute("start"));
			var pfamEndPos=parseInt((pfamNodes[pfamIndex]).getAttribute("end"));
					
			var pfamDescription=(pfamNodes[pfamIndex]).getAttribute("description");
			var pfamFamily=(pfamNodes[pfamIndex]).getAttribute("family");
					
		onePfam.push({'begPos':pfamBegPos,'endPos':pfamEndPos,'description':pfamDescription,'pfamFamily':pfamFamily});

		}

		oneIsoform.pfams=onePfam;
		var disorderNode=isoformNodes[isoformIndex].getElementsByTagName("disProt_value")[0];
								
		var disorderStr=disorderNode.getAttribute("disOrder_string");
		var disorderValue=disorderNode.innerHTML.split(" ");
		
		oneIsoform.disorderValue=disorderValue;
		
		oneIsoform.disorderString=disorderStr;				
		
		isoforms.push(oneIsoform);
		
				
	}	
	
	return isoforms;
	
}


ASPlot.xmlParser.prototype.parseGeneSequence=function(){
	
	var sequenceNode=this.eventNodes[0].getElementsByTagName("geneSequence");
	var sequence=sequenceNode[0].innerHTML;
	var start=sequenceNode[0].getAttribute("start");
	var end=sequenceNode[0].getAttribute("end");

	return {sequence:sequence,start:start,end:end};
}


ASPlot.xmlParser.prototype.parseTranscripts=function(){
	this.transcirpts=[];
			
	var transcriptsNode=this.eventNodes[0].getElementsByTagName("transcript");//.innerHTML;
	
	for(var transcriptIndex=0 ; transcriptIndex<transcriptsNode.length;transcriptIndex++){
		var blocks=[];
		var exonsNode=transcriptsNode[transcriptIndex].childNodes;
			
		//var exons=position.split("@");
		for(var exonIndex=0; exonIndex<exonsNode.length;++exonIndex){
			
			//var loneExon=exonsNode[exonIndex].getAttribute();	
			//var lchrsosome=exonsNode[exonIndex].getAttribute("");
			var lbegPos=parseInt(exonsNode[exonIndex].getAttribute("start"));
			var lendPos=parseInt(exonsNode[exonIndex].getAttribute("end"));
			//var lstrand=loneExon[3];
			var ifAlternative=Boolean(exonsNode[exonIndex].getAttribute("IfAlternative")=="true");

			//if(loneExon.length>4){
				//var lIfAS=oneExon[4];
				blocks.push({begPos:lbegPos,endPos:lendPos,ifAS:ifAlternative});
			
			//}
			//else{
			
				//blocks.push({begPos:lbegPos,endPos:lendPos,ifAS:ifAlternative});
				
			//}	

		}
		
		this.transcirpts.push(blocks);
	}
	return this.transcirpts;
}


ASPlot.xmlParser.prototype.parseXML=function(url){


        xmlHttp = new window.XMLHttpRequest();
        xmlHttp.open("GET", url,false); // Use syncronous communication
        xmlHttp.send(null);
	
        this.xmldoc = xmlHttp.responseXML.documentElement;
	
	this.eventNodes=this.xmldoc.getElementsByTagName("event");
	//this.position=eventNodes[0].getElementsByTagName("position")[0].innerHTML;	
	
	
	
	return this;
}



ASPlot.submitQuery=function(){
	var text=document.getElementById("searchFild").value;
	if(typeof(text) == 'undefined' || text == null||text=="")
		return;
	
	var loadingPage=new ASPlot.firstPage(text);
	
	loadingPage.plotAS();
	loadingPage.plotTranscript();
	
}
	
//var searchButton = document.getElementById("submitQuery");
//event handler:
function submitQuery(){ 
	alter("need a few seconds to finish runing!!");
	return true;
	
}

function leftPanelButtonOver(){
	document.images["leftPanelButton"].src= "firstpage/xl.jpg";
	var leftPanelControl = document.getElementById("leftPanelControl");
	leftPanelControl.style.display = "block";	
	
	
	
}

function leftPanelButtonOut(){
	document.images["leftPanelButton"].src= "firstpage/xx.jpg";

	var leftPanelControl = document.getElementById("leftPanelControl");
	leftPanelControl.style.display = "none";
		
}

function leftPanelExpand(){}


// init page
function initFirstPage(){
	var mainPage = document.getElementById("mainPage");
	mainPage.style.width=document.documentElement.clientWidth-32+'px';


    	var canvas1 = document.getElementById("visualas");
	//context1 = this.canvas1.getContext("2d");
	canvas1.width  = document.documentElement.clientWidth-60;
		
	//this.xml=xmlParser.parseXML(xml);
	//this.data=this.xml.parseASExons();
	
	
	var canvas2=document.getElementById("visualtranscripts");
	canvas2.width  = document.documentElement.clientWidth-60;
	
    	//var module1 = document.getElementById("inputModule");
	//var module2 = document.getElementById("visualASModule");
	//var module3 = document.getElementById("exonsModule");

	//module1.style.width=document.documentElement.clientWidth-60+'px';
	//module2.style.width=document.documentElement.clientWidth-60+'px';
	//module3.style.width=document.documentElement.clientWidth-60+'px';


}

function initVisualPage(){
	var mainPage = document.getElementById("mainPage");
	mainPage.style.width=document.documentElement.clientWidth-32+'px';
	var canvasWidth=document.documentElement.clientWidth-50;
	
    	var canvasGene = document.getElementById("geneVisual");
	//context1 = this.canvas1.getContext("2d");
	canvasGene.width  = canvasWidth;
  
    	//canvasGene.addEventListener("mousew", mouse, false);

	//this.xml=xmlParser.parseXML(xml);
	//this.data=this.xml.parseASExons();
	
	var canvasProtein1=document.getElementById("proteinVisual1");
	canvasProtein1.width  =canvasWidth;

	//var canvasProtein2=document.getElementById("proteinVisual2");
	//canvasProtein2.width  = canvasWidth;

    	var canvasTranscriptId = document.getElementById("transcriptsVisual");
	canvasTranscriptId.width=canvasWidth;
	
	var eventId = document.getElementById("eventId");
	//eventId.style.width=document.documentElement.clientWidth-32+'px';
	var eventId0=eventId.innerHTML;
	var visualPage=new ASPlot.visualPage(eventId0+".xml");
	
	//visualPage.proteinPlot1.initEventlistener();
	

	visualPage.genePlot.plot();
	visualPage.proteinPlot1.plot();
	visualPage.transcriptPlot.plot();
	
	//visualPage.proteinPlot2.plot();
	//visualPage.plotGene();
	//visualPage.plotProtein();
	
	
	
}

//page initialization
(function(){
	//initFirstPage();
	initVisualPage();
	
	//getElementById('div_register').setAttribute("style","width:500px");
	
	//var data=ASPlot.parseXML("all.xml");
	//alert(data.position);
	//var loadingPage=new ASPlot.firstPage("all.xml");
	//loadingPage.plotAS();
	
}());


